1) The abstractions that file systems provide are mapping a file name to a "stream of bytes", as well as where and how file data is stored. For example, operations that happen in byte-based calculations appear to happen without any other steps, but at the hardware level, things are happening in a way that work with "blocks", because that is how the data is physical framed.

2) It probably has some kind of memory address to denote at what point in the file is the read / write happening. Also, some sort of pointer to the file.

3) While one process is waiting for data, it can be interrupted so another process can run in the meantime. Also:
	- Block transfers 	(work in bigger chunks, because time difference is negligible)
	- Prefetching 		(predict what will be needed next, and load it up just incase)
	- Buffering 		(Keeping things in memory for manipulation, and then only writing when truly needed or requested)
	- Caching 			(Keeping blocks in memory so that they don't needed to be loaded back again)

4) The file or your modifications were buffered, and thus not written to the disk, but only in the RAM. So when you crashed, the memory was reset, and you lost the work. If you had closed the file, then the buffered data would have been writted tp disk.

5) FAT over inode: FAT makes sense when you're working with files that are smaller, and inodes are good for larger, multi-blocked files.

6) Overhead is the space that the data structures which the allocator uses to work with data. Fragmentation is when space on the disk in the form of partially used or unused blocks cause gaps and extraneous space scattered throughout the disk, reducing overall performance and speed.

7) It makes programmers' jobs easier because it essentially means they only need to learn one API, and it makes their programs' interaction with files the same as reading / writing those files (simplifies structure). A downside might be that treating everything like a stream of bytes could be drastically less efficient, meaning you are prioritizing you're understanding of the system at the cost of true efficiency.