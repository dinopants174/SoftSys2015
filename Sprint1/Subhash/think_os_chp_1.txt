1) Many interpreted languages support dynamic types, but compiled languages
are usually limited to static types.

2) Static allows you to look at the program and know exactly what type each variable is. (You may have to wait until program is running for dynamic typed.) Also, errors are found more quickly because static-typed will find problems at compile time rather than runtime.

3) If the compiler finds that char apple = 3, then it will throw a static semantic error.

4) Since optimization modifies the code, turning it off will help you write cleaner code the first time around, and it can help you debug, since functions remain they way they were written and have not been fiddled around with.

5) Because generating the assembly code will be different for each processor or architecture of your hardware.

6) During the linking phase, it's possible that the compiler will find that function or variable wrong, and during the static check, it could pick up on that as well. This could result in both static semantic and linking errors.

7) Reading or writing in an incorrect location in memory.